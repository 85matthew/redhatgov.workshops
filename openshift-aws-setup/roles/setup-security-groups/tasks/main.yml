---

- name: Create vpc security group
  ec2_group:
   name: "{{ ec2_security_group }}"
   description: "Default security group that allows all instances in the VPC to talk to each other over any port and protocol."
   vpc_id: "{{ vpc_id }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   state: "present"
   rules:
    - proto: "-1"
      from_port: "0"
      to_port: "0"
      group_name: "{{ ec2_security_group }}"
   rules_egress:
    - proto: "-1"
      from_port: "0"
      to_port: "0"
      group_name: "{{ ec2_security_group }}"

- name: Create ingress security group
  ec2_group:
   name: "{{ ec2_security_group_ingress }}"
   description: "Security group that allows public ingress to instances, HTTP, HTTPS and more."
   vpc_id: "{{ vpc_id }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   state: "present"
   rules:
     - proto: "tcp"
       from_port: "{{ http_port }}"
       to_port: "{{ http_port }}"
       cidr_ip: "{{ public_route_cidr_block }}"
     - proto: "tcp"
       from_port: "{{ http_proxy_port }}"
       to_port: "{{ http_proxy_port }}"
       cidr_ip: "{{ public_route_cidr_block }}"
     - proto: "tcp"
       from_port: "{{ https_port }}"
       to_port: "{{ https_port }}"
       cidr_ip: "{{ public_route_cidr_block }}"
     - proto: "tcp"
       from_port: "{{ https_proxy_port }}"
       to_port: "{{ https_proxy_port }}"
       cidr_ip: "{{ public_route_cidr_block }}"
     - proto: "tcp"
       from_port: "{{ kubelet_port }}"
       to_port: "{{ kubelet_port }}"
       cidr_ip: "{{ public_route_cidr_block }}"
     - proto: "udp"
       from_port: "{{ vxlan_port }}"
       to_port: "{{ vxlan_port }}"
       cidr_ip: "{{ public_route_cidr_block }}"
     - proto: "tcp"
       from_port: "{{ etcd_port }}"
       to_port: "{{ etcd_port }}"
       cidr_ip: "{{ public_route_cidr_block }}"
     - proto: "tcp"
       from_port: "{{ etcd_proxy_port }}"
       to_port: "{{ etcd_proxy_port }}"
       cidr_ip: "{{ public_route_cidr_block }}"
     - proto: "tcp"
       from_port: "{{ cockpit_port }}"
       to_port: "{{ cockpit_port }}"
       cidr_ip: "{{ public_route_cidr_block }}"
     - proto: "tcp"
       from_port: "{{ asb_port }}"
       to_port: "{{ asb_port }}"
       cidr_ip: "{{ public_route_cidr_block }}"
   rules_egress: []

- name: Create egress security group
  ec2_group:
   name: "{{ ec2_security_group_egress }}"
   description: "This security group allows public egress from the instances for HTTP and HTTPS, which is needed for yum updates, git access etc etc."
   vpc_id: "{{ vpc_id }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   state: "present"
   rules_egress:
    - proto: "tcp"
      from_port: "{{ http_port }}"
      to_port: "{{ http_port }}"
      cidr_ip: "{{ public_route_cidr_block }}"
    - proto: "tcp"
      from_port: "{{ https_port }}"
      to_port: "{{ https_port }}"
      cidr_ip: "{{ public_route_cidr_block }}"
    - proto: "tcp"
      from_port: "{{ es_port }}"
      to_port: "{{ es_port }}"
      cidr_ip: "{{ public_route_cidr_block }}"
    - proto: "tcp"
      from_port: "{{ es_proxy_port }}"
      to_port: "{{ es_proxy_port }}"
      cidr_ip: "{{ public_route_cidr_block }}"

- name: Create ssh security group
  ec2_group:
   name: "{{ ec2_security_group_ssh }}"
   description: "Default security group that allows all instances in the VPC to talk to each other over any port and protocol."
   vpc_id: "{{ vpc_id }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   state: "present"
   rules:
    - proto: "tcp"
      from_port: "{{ ssh_port }}"
      to_port: "{{ ssh_port }}"
      cidr_ip: "{{ public_route_cidr_block }}"
   rules_egress: []
