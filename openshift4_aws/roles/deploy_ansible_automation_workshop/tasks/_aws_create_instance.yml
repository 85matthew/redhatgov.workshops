---
#===============================================================================
#  Provisioning
#===============================================================================
- name: Debug for Student Provisioning Loop
  debug:
    msg: "###Provisioning edge-{{ user_id }}"

#===============================================================================
#  Create RHEL instance(s) for each student
#===============================================================================

- name: Query for existing ec2 instance
  command: aws ec2 describe-instances --region {{ region }} --filter Name=tag:Name,Values="edge-{{ user_id }}-{{ openshift_cluster_name }}-{{ workshop_abbrev }}-{{ workshop_prefix }}-rhel" --query "Reservations[].Instances[].PublicDnsName" --output text
  register: query_public_dns_name

- debug:
    var: query_public_dns_name

- name: Create RHEL instances
  amazon.aws.ec2:
    assign_public_ip: yes
    key_name: "{{ openshift_cluster_name }}-{{ workshop_abbrev }}-{{ workshop_prefix }}-key"
    group: "{{ openshift_cluster_name }}-{{ workshop_abbrev }}-{{ workshop_prefix }}-rhel-sg"
    region: "{{ region }}"
    instance_type: "{{ rhel_instance_type }}"
    image: "{{ rhel_ami }}"
    vpc_subnet_id: "{{ ec2_subnet.subnet.id }}"
    wait: true
    state: "{{ aws_state }}"
    instance_tags:
      Name: "edge-{{ user_id }}-{{ openshift_cluster_name }}-{{ workshop_abbrev }}-{{ workshop_prefix }}-rhel"
      username: "{{ local_user }}"
      workshop_prefix: "{{ workshop_prefix }}"
      rhel: "edge-{{ user_id }}-{{ openshift_cluster_name }}"
      # RH IT Required Tags
      Route53: "edge-{{ user_id }}-{{ workshop_prefix }}.node.0.{{ domain_name }}"
      ServiceName: "{{ openshift_cluster_name }}-{{ workshop_abbrev }}-{{ workshop_prefix }}-rhel"
      ServiceOwner: "{{ local_user }}"
      ServicePhase: "{{ workshop_phase }}"
      BusinessUnit: "415"
      AppCode: "{{ workshop_appCode }}"
  register: ec2_rhel
  when: query_public_dns_name.stdout == ''

- debug:
    var: ec2_rhel

- name: Get ec2 instance info
  community.aws.ec2_instance_info:
    region: "{{ region }}"
    filters:
      "tag:Name": "edge-{{ user_id }}-{{ openshift_cluster_name }}-{{ workshop_abbrev }}-{{ workshop_prefix}}-rhel"
      instance-state-name: [ "starting", "running" ]
  register: ec2_details


- debug:
    var: ec2_details

- debug:
    var: ec2_details.instances

- debug:
    var: ec2_details.instances.0.public_dns_name

- name: add RHEL hosts to groups
  add_host:
    name: "edge-{{ user_id }}-{{ workshop_abbrev }}-{{ workshop_prefix}}-rhel-{{ ec2_details.instances.0.public_dns_name }}"
    ansible_ssh_host: "{{ ec2_details.instances.0.public_ip_address }}"
    groups: rhel_nodes

- name: create inventory list (node hosts)
  lineinfile:
    path: "{{ deploy_working_dir }}/hostlist"
    line: "{{ ec2_details.instances.0.public_ip_address }} edge-{{ user_id }}-{{ workshop_prefix }}.node.{{ ec2_details.instances.0.ami_launch_index }}.{{ domain_name }} node.{{ ec2_details.instances.0.ami_launch_index }}"
    regexp: ".*edge-{{ user_id }}-{{ workshop_prefix }}.node.{{ ec2_details.instances.0.ami_launch_index }}.{{ domain_name }}.*"

- name: Add node hosts to inventory
  lineinfile:
    path: "{{ inventory_working_dir }}/hosts"
    insertafter: '^\[rhel_nodes\]$'
    regexp: "^edge-{{ user_id }}-{{ workshop_prefix }}.node.{{ ec2_details.instances.0.ami_launch_index }}.{{ domain_name }}"
    line: "edge-{{ user_id }}-{{ workshop_prefix }}.node.{{ ec2_details.instances.0.ami_launch_index }}.{{ domain_name }} ansible_ssh_host={{ ec2_details.instances.0.public_ip_address }} ansible_host={{ ec2_details.instances.0.public_dns_name }}"

#---------------------------------------------------
#  DNS
#---------------------------------------------------
- name: Create DNS records for RHEL
  route53:
    zone: "{{ openshift_cluster_base_domain }}"
    type: "CNAME"
    ttl: "300"
    record: "edge-{{ user_id }}-{{ workshop_prefix }}.node.{{ ec2_details.instances.0.ami_launch_index }}.{{ domain_name }}"
    value: "{{ ec2_details.instances.0.public_dns_name }}"
    state: "{{ aws_state }}"
  register: dns_output

- name: Debug DNS Output
  debug:
    var: dns_output
